//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  def lowerFirst(str):
    return str[:1].lower() + str[1:] if str else ""

  def argLabel(label):
    return label + ": " if label <> "_" else ""

  integerOperations = [
    # Swift name,         operator, label, doc
    ('WrappingIncrement', '&+',     "by",  "wrapping add"),
    ('WrappingDecrement', '&-',     "by",  "wrapping subtract"),
    ('BitwiseAnd',        '&',      "_",   "bitwise and"),
    ('BitwiseOr',         '|',      "_",   "bitwise or"),
    ('BitwiseXor',        '^',      "_",   "bitwise xor")
  ]
}%

/// Provides atomic operations on an unsigned integer value stored at a stable
/// memory location.
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicUInt {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @_transparent // Debug performance
  public init(at address: UnsafeMutablePointer<UInt>) {
    self._ptr = UnsafeMutableRawPointer(address)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  @inlinable
  public var address: UnsafeMutablePointer<UInt> {
    _ptr.assumingMemoryBound(to: UInt.self)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  /// Atomically loads and returns the current value,
  /// with the specified memory ordering.
  @_transparent @_alwaysEmitIntoClient
  public func load(ordering: AtomicLoadOrdering) -> UInt {
    _ptr._atomicLoadWord(ordering: ordering)
  }
}


@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  /// Atomically sets the current value to `desired`,
  /// with the specified memory ordering.
  @_transparent @_alwaysEmitIntoClient
  public func store(
    _ desired: UInt,
    ordering: AtomicStoreOrdering
  ) {
    _ptr._atomicStoreWord(desired, ordering: ordering)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  /// Atomically sets the current value to `desired` and returns the previous
  /// value, with the specified memory ordering.
  ///
  /// - Returns: The original value.
  @_transparent @_alwaysEmitIntoClient
  public func exchange(
    _ desired: UInt,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    _ptr._atomicExchangeWord(desired, ordering: ordering)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  /// Perform an atomic compare and exchange operation with
  /// the specified memory ordering.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering: ordering) { value in
  ///   if value == expected {
  ///      value = desired
  ///      return true
  ///   } else {
  ///      expected = value
  ///      return false
  ///   }
  /// }
  /// ```
  ///
  /// This method implements a "strong" compare and exchange operation
  /// that does not permit spurious failures.
  @_transparent @_alwaysEmitIntoClient
  public func compareExchange(
    expected: inout UInt,
    desired: UInt,
    ordering: AtomicUpdateOrdering
  ) -> Bool {
    _ptr._atomicCompareExchangeWord(
      expected: &expected,
      desired: desired,
      ordering: ordering)
  }
}
% end


% for (name, op, label, doc) in integerOperations:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  /// Perform an atomic ${doc} operation and return the original value, with
  /// the specified memory ordering.
  ///
  % if "Wrapping" in name:
  /// Note: This operation silently wraps around on overflow, like the
  /// `${op}` operator does on `UInt` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public func loadThen${name}(
    ${label} operand: Int,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    _ptr._atomicLoadThen${name}Word(${argLabel(label)}operand, ordering: ordering)
  }

  /// Perform an atomic ${doc} operation and return the new value, with
  /// the specified memory ordering.
  ///
  % if "Wrapping" in name:
  /// Note: This operation silently wraps around on overflow, like the
  /// `${op}` operator does on `UInt` values.
  ///
  % end
  /// - Returns: The new value after the operation.
  @_transparent @_alwaysEmitIntoClient
  public func ${lowerFirst(name)}ThenLoad(
    ${label} operand: Int,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    _ptr._atomicLoadThen${name}Word(
      ${argLabel(label)}operand,
      ordering: ordering
    ) ${op} operand
  }
}
% end

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  @_transparent @_alwaysEmitIntoClient
  public func wrappingIncrement(
    by delta: UInt = 1,
    ordering: AtomicUpdateOrdering
  ) {
    _ptr._atomicLoadThenWrappingIncrementWord(by: delta, ordering: ordering)
  }

  @_transparent @_alwaysEmitIntoClient
  public func wrappingDecrement(
    by delta: UInt = 1,
    ordering: AtomicUpdateOrdering
  ) {
    _ptr._atomicLoadThenWrappingDecrementWord(by: delta, ordering: ordering)
  }
}
