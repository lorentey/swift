//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  def rmwOrderings():
    return [
      # Swift enum case,         API name,     documentation name,        llvm name,   failure name
      ('relaxed',                'Relaxed',    'relaxed',                 'monotonic', 'monotonic'),
      ('acquiring',              'Acquiring',  'acquiring',               'acquire',   'acquire'),
      ('releasing',              'Releasing',  'releasing',               'release',   'monotonic'),
      ('acquiringAndReleasing',  'Barrier',    'acquiring-and-releasing', 'acqrel',    'acquire'),
    ]

  def loadOrderings():
    return [
      # Swift enum case,         API name,    doc name,     llvm name
      ('relaxed',                'Relaxed',   'relaxed',    'monotonic'),
      ('acquiring',              'Acquiring', 'acquiring',  'acquire'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         API name,    doc name,     llvm name
      ('relaxed',                'Relaxed',   'relaxed',    'monotonic'),
      ('releasing',              'Releasing', 'releasing',  'release'),
    ]

  integerOperations = [
    # Swift name,         llvm name,  operator, label, doc
    ('WrappingIncrement', 'add',      '&+',     "by",  "wrapping add"),
    ('WrappingDecrement', 'sub',      '&-',     "by",  "wrapping subtract"),
    ('BitwiseAnd',        'and',      '&',      "_",   "bitwise and"),
    ('BitwiseOr',         'or',       '|',      "_",   "bitwise or"),
    ('BitwiseXor',        'xor',      '^',      "_",   "bitwise xor")
  ]

  def argLabel(label):
    return label + ": " if label <> "_" else ""
}%

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for (enumOrder, apiOrder, docOrder, llvmOrder) in loadOrderings():
  /// Atomically loads a word starting at this address with ${docOrder}
  /// memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment hook
  func _atomic${apiOrder}LoadWord() -> UInt {
    return UInt(Builtin.atomicload_${llvmOrder}_Word(_rawValue))
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Atomically loads a word starting at this address with the specified
  /// memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicLoadWord(ordering: AtomicLoadOrdering) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedLoadWord()
    default:
      return _atomicAcquiringLoadWord()
    }
  }
}


extension UnsafeMutableRawPointer {
% for enumOrder, apiOrder, docOrder, llvmOrder in storeOrderings():
  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with ${docOrder} memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment hook
  func _atomic${apiOrder}StoreWord(_ desired: UInt) {
    Builtin.atomicstore_${llvmOrder}_Word(_rawValue, desired._builtinWordValue)
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with the specified memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicStoreWord(
    _ desired: UInt,
    ordering: AtomicStoreOrdering
  ) {
    switch ordering {
    case .relaxed:
      _atomicRelaxedStoreWord(desired)
    default:
      _atomicReleasingStoreWord(desired)
    }
  }
}

extension UnsafeMutableRawPointer {
% for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  /// Atomically stores the specified value at the memory referenced by this
  /// pointer, returning the previous value, with ${docOrder} memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  ///
  /// - Returns: The original value.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment hook
  func _atomic${apiOrder}ExchangeWord(
    _ desired: UInt
  ) -> UInt {
    let oldValue = Builtin.atomicrmw_xchg_${llvmOrder}_Word(
      _rawValue, desired._builtinWordValue)
    return UInt(oldValue)
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with the specified memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicExchangeWord(
    _ desired: UInt,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedExchangeWord(desired)
    case .acquiring:
      return _atomicAcquiringExchangeWord(desired)
    case .releasing:
      return _atomicReleasingExchangeWord(desired)
    default:
      return _atomicBarrierExchangeWord(desired)
    }
  }
}

extension UnsafeMutableRawPointer {
% for swiftOrder, apiOrder, docOrder, llvmOrder, failureOrder in rmwOrderings():
  /// Perform an atomic compare and exchange operation with
  /// ${docOrder} memory ordering.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering: .${swiftOrder}) { value in
  ///   if value == expected {
  ///      value = desired
  ///      return true
  ///   } else {
  ///      expected = value
  ///      return false
  ///   }
  /// }
  /// ```
  ///
  /// This method implements a "strong" compare and exchange operation
  /// that does not permit spurious failures.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment hook
  func _atomic${apiOrder}CompareExchangeWord(
    expected: inout UInt,
    desired: UInt
  ) -> Bool {
    let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_Word(
      _rawValue, expected._builtinWordValue, desired._builtinWordValue)
    expected = UInt(oldValue)
    return Bool(won)
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Perform an atomic compare and exchange operation with the specified memory
  /// ordering.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering: ordering) { value in
  ///   if value == expected {
  ///      value = desired
  ///      return true
  ///   } else {
  ///      expected = value
  ///      return false
  ///   }
  /// }
  /// ```
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicCompareExchangeWord(
    expected: inout UInt,
    desired: UInt,
    ordering: AtomicUpdateOrdering
  ) -> Bool {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .acquiring:
      return _atomicAcquiringCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .releasing:
      return _atomicReleasingCompareExchangeWord(
        expected: &expected,
        desired: desired)
    default:
      return _atomicBarrierCompareExchangeWord(
        expected: &expected,
        desired: desired)
    }
  }
}

extension UnsafeMutableRawPointer {
% for (swiftName, builtinName, operator, label, doc) in integerOperations:
%   for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  /// Perform an atomic ${doc} operation and return the new value,
  /// with ${docOrder} memory ordering.
  ///
  % if "Wrapping" in swiftName:
  /// - Note: This operation silently wraps around on overflow, like the
  /// `${operator}` operator does on `UInt` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment hook
  func _atomic${apiOrder}LoadThen${swiftName}Word(
    ${label} operand: UInt
  ) -> UInt {
    let value = Builtin.atomicrmw_${builtinName}_${llvmOrder}_Word(
      _rawValue, operand._builtinWordValue)
    return UInt(value)
  }
%   end
% end
}

extension UnsafeMutableRawPointer {
% for (swiftName, builtinName, operator, label, doc) in integerOperations:
  /// Perform an atomic ${doc} operation and return the new value,
  /// with the specified memory ordering.
  ///
  % if "Wrapping" in swiftName:
  /// - Note: This operation silently wraps around on overflow, like the
  /// `${operator}` operator does on `UInt` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicLoadThen${swiftName}Word(
    ${label} operand: UInt,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedLoadThen${swiftName}Word(${argLabel(label)}operand)
    case .acquiring:
      return _atomicAcquiringLoadThen${swiftName}Word(${argLabel(label)}operand)
    case .releasing:
      return _atomicReleasingLoadThen${swiftName}Word(${argLabel(label)}operand)
    default:
      return _atomicBarrierLoadThen${swiftName}Word(${argLabel(label)}operand)
    }
  }
% end
}
